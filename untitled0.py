# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gbuuTZUwV92h21DhtRQPfaxzpGzpFm-r
"""

pip install plotly pandas

import plotly.express as px
import pandas as pd

df=pd.read_csv('/content/message_data.csv')

fig = px.line(df, x='message_time', y='message_id', title='Percentage of Daily Messages Sent by New Users')
fig.show()

"""# New Section"""

pip install langchain

pip install openai

import openai

# Set up your OpenAI API credentials
openai.api_key = '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'

# Define a function to generate a system message
def generate_system_message():
    return "I'm a friendly chatbot! I can greet you and tell jokes about your name. Feel free to ask me anything."

# Define a function to generate a joke based on a name
def generate_joke(name):
    return f"Why did {name} go to the dentist? To get a little cavity search!"

# Define a function to process user input and generate a response
def process_user_input(user_input):
    # Generate a system message
    system_message = generate_system_message()

    # Store the current user message and system message in context
    context.append({'user': user_input, 'system': system_message})

    # Generate a response using GPT-3.5 Turbo
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=flatten_context(),
        max_tokens=50,
        temperature=0.6,
        n=1,
        stop=None,
    )

    # Extract the reply from the response
    reply = response.choices[0].text.strip()

    # Store the current user message and system message in context
    context.append({'user': user_input, 'system': reply})

    return reply

# Function to flatten the conversation context
def flatten_context():
    flattened_context = ""
    for item in context:
        flattened_context += item['user'] + "\n" + item['system'] + "\n"
    return flattened_context

# Initialize the conversation context
context = []

# Start the conversation
print(generate_system_message())

# Chat loop
while True:
    user_input = input("User: ")
    if user_input.lower() == 'exit':
        print("Chat ended.")
        break

    # Process user input and generate a response
    system_response = process_user_input(user_input)
    print("Chatbot:", system_response)

"""# New Section"""

pip install discord.py

import discord
from discord.ext import commands
import asyncio

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)
stop_event = asyncio.Event()

@bot.event
async def on_ready():
    print(f'Bot connected as {bot.user.name}')

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    await message.channel.send(f'Hello {message.author.name}!')

async def start_bot():
    await bot.start('MTEyODkzNzQ4NDgwMjMzNDgzMg.GA9AsK.XW_wmZF94XNOwGdu6t7iRz64vtHxBSshDn_XNU')

async def close_bot():
    await bot.close()


# Connect to the bot
asyncio.create_task(start_bot())

# Add your code here
# You can perform other tasks or logic without the need for an explicit event loop

# Disconnect and clean up the bot
asyncio.create_task(close_bot())

"""# New Section"""

pip install discord.py

!pip install -qU langchain

import discord
from discord.ext import commands
from langchain import LangChain

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)
langchain = LangChain()

@bot.event
async def on_ready():
    print(f'Bot connected as {bot.user.name}')

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    # Get user input
    user_input = message.content

    # Generate a joke about the user's name
    joke = await langchain.generate(prompt=f"I have a joke about your name, {message.author.name}...")

    # Respond with the joke and answer the user's question
    response = await langchain.chain(prompt=f"{joke}\n\nYou asked: {user_input}")

    # Send the response to the Discord channel
    await message.channel.send(response)

# Replace 'YOUR_BOT_TOKEN' with your actual bot token
bot.run('MTEyODkzNzQ4NDgwMjMzNDgzMg.GA9AsK.XW_wmZF94XNOwGdu6t7iRz64vtHxBSshDn_XNU')